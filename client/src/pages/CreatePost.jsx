import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { preview } from '../assets';
import { FormField, Loader } from '../components';
import { getRandomPrompt } from '../utils';

const CreatePost = () => {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    name: '',
    prompt: '',
    photo: ''
  });
  const [generatingImg, setGeneratingImg] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const generateImg = async () => {
    if (form.prompt) {
      setGeneratingImg(true);
      try {
        const response = await fetch('http://localhost:9000/api/v1/dalles', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ prompt: form.prompt })
        });

        const data = await response.json();
        setForm({ ...form, photo: `data:image/jpeg;base64, ${data.photo}` });
        setGeneratingImg(false);
      } catch (error) {
        console.log(error);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      console.log('Please enter a prompt');
    }
  };

  console.log('form');
  console.log(form);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (form.prompt && form.photo) {
      setIsLoading(true);

      try {
        const response = await fetch('http://localhost:9000/api/v1/posts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(form),
        });

        await response.json();
        navigate('/');
      } catch (err) {
        console.log(err);
      } finally {
        setIsLoading(false);
      }
    } else {
      console.log('Please enter a prompt');
    }
  };

  const handleChange = (event) => {
    setForm({ ...form, [event.target.name]: event.target.value });
  };

  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPrompt });
  };
  return (
    <section className='max-w-7xl mx-auto'>
        <div>
            <h1 className='font-extrabold text-[#222328] text-[32px]'>The Community Showcase</h1>
            <p className='max-w-[500px] text-[14px] mt-2 text-[#666e75]'>
              Create imaginative and visually stunning images generated by DALL-E AI
            </p>
        </div>

        <form className='mt-16 max-w-3xl' onSubmit={handleSubmit}>
            <div className='flex flex-col gap-5'>
                <FormField
                 labelName='Your name'
                 type='text'
                 placeholder='John Doe'
                 name='name'
                 value={form.name}
                 handleChange={handleChange}
                />
                <FormField
                 labelName='Prompt'
                 type='text'
                 placeholder='John Doe'
                 name='prompt'
                 value={form.prompt}
                 handleChange={handleChange}
                 isSurpriseMe
                 handleSurpriseMe={handleSurpriseMe}
                />

                <div className='relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 h-64 justify-center items-center w-64 p-3'>
                    {form.photo ? (
                        <img src={form.photo} alt={form.prompt} className='w-full h-full object-contain' />
                    ) : (
                        <img src={preview} alt="preview" className='opacity-40 w-9/12 h-9/12 object-contain' />
                    )}

                    {generatingImg && (
                        <div className='flex items-center justify-center absolute inset-0 z-0 rounded-lg bg-[rgba(0,0,0,0.5)]'>
                         <Loader />
                        </div>
                    )}
                </div>
            </div>

            <div className='mt-5 flex gap-5'>
                <button type='button' onClick={generateImg} className='text-white bg-green-700 rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'>
                  {generatingImg ? 'Generating...' : 'Generate'}
                </button>
            </div>

            <div className='mt-10'>
                <p className='mt-2 text-[#666e75] text-sm'>Once you have created the image you want, you can share it with others in the community</p>
                <button type='submit' className='mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'>
                    {isLoading ? 'Sharing...' : 'Share with the community'}
                </button>
            </div>
        </form>
    </section>
  );
};

export default CreatePost;